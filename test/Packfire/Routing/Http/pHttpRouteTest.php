<?php

pload('packfire.routing.http.pHttpRoute');
require_once('mocks/tMockRouteRequest.php');

/**
 * Test class for pHttpRoute.
 * Generated by PHPUnit on 2012-09-13 at 10:19:12.
 */
class pHttpRouteTest extends PHPUnit_Framework_TestCase {

    /**
     * @var pHttpRoute
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $config = new pMap(array(
            'rewrite' => '/home/{data}/{name}',
            'actual' => 'Rest',
            'method' => array('delete'),
            'params' => array('data' => 'int', 'object' => array('name' => 'alnum'))
        ));
        $this->object = new pHttpRoute('test', $config);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pHttpRoute::name
     */
    public function testName() {
        $this->assertEquals('test', $this->object->name());
    }

    /**
     * @covers pHttpRoute::httpMethod
     */
    public function testHttpMethod() {
        $this->assertEquals(array('delete'), $this->object->httpMethod());
    }

    /**
     * @covers pHttpRoute::rewrite
     */
    public function testRewrite() {
        $this->assertEquals('/home/{data}/{name}', $this->object->rewrite());
    }

    /**
     * @covers pHttpRoute::actual
     */
    public function testActual() {
        $this->assertEquals('Rest', $this->object->actual());
    }

    /**
     * @covers pHttpRoute::params
     */
    public function testParams() {
        $this->assertEquals(array('data' => 'int', 'object' => array('name' => 'alnum')),
                $this->object->params()->toArray());
    }

    /**
     * @covers pHttpRoute::match
     */
    public function testMatch() {
        $request = new tMockRouteRequest('home/200/test',
                array('PHP_SELF' => 'index.php/home/200/test', 'SCRIPT_NAME' => 'index.php'));
        $this->assertFalse($this->object->match($request));
    }

    /**
     * @covers pHttpRoute::match
     */
    public function testMatch2() {
        $request = new tMockRouteRequest('home/200/jack',
                array('PHP_SELF' => 'index.php/home/200/jack', 'SCRIPT_NAME' => 'index.php'));
        $request->method(pHttpMethod::POST);
        $request->headers()->add('X-HTTP-Method', pHttpMethod::DELETE);
        $this->assertTrue($this->object->match($request));
    }

    /**
     * @covers pHttpRoute::match
     */
    public function testMatch3() {
        $request = new tMockRouteRequest('home/200/jack',
                array('PHP_SELF' => 'index.php/home/200/jack', 'SCRIPT_NAME' => 'index.php'));
        $request->method(pHttpMethod::POST);
        $request->headers()->add('X-HTTP-Method-Override', pHttpMethod::DELETE);
        $this->assertTrue($this->object->match($request));
    }

    /**
     * @covers pHttpRoute::match
     */
    public function testMatchVarFail() {
        $request = new tMockRouteRequest('home/20.!0',
                array('PHP_SELF' => 'index.php/home/20.!0', 'SCRIPT_NAME' => 'index.php'));
        $request->method(pHttpMethod::POST);
        $request->headers()->add('X-HTTP-Method-Override', pHttpMethod::DELETE);
        $this->assertFalse($this->object->match($request));
    }

}