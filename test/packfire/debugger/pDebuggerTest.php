<?php

pload('packfire.debugger.pDebugger');
pload('packfire.debugger.console.pConsoleDebugOutput');
pload('packfire.ioc.pServiceBucket');

/**
 * Test class for pDebugger.
 * Generated by PHPUnit on 2012-09-17 at 14:19:07.
 */
class pDebuggerTest extends PHPUnit_Framework_TestCase {
    
    /**
     * @var pDebugger
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        
        $bucket = new pServiceBucket();
        $bucket->put('debugger.output', $this->getMock('pConsoleDebugOutput'));
        
        /* @var $object pDebugger */
        $this->object = new pDebugger();
        $this->object->setBucket($bucket);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pDebugger::enabled
     */
    public function testEnabled() {
        $this->assertTrue($this->object->enabled());
        $this->assertTrue($this->object->enabled(true));
        $this->assertTrue($this->object->enabled());
        $this->assertFalse($this->object->enabled(false));
        $this->assertFalse($this->object->enabled());
    }

    /**
     * @covers pDebugger::dump
     */
    public function testDump() {
        $this->object->service('debugger.output')
                ->expects($this->once())
                ->method('write')
                ->with(
                        $this->equalTo('5'),
                        $this->isType('string'),
                        $this->equalTo('dump')
                    );
        $this->object->dump(5);
    }

    /**
     * @covers pDebugger::log
     */
    public function testLog() {
        $this->object->service('debugger.output')
                ->expects($this->once())
                ->method('write')
                ->with(
                        $this->equalTo(5),
                        $this->isNull(),
                        $this->equalTo('log')
                    );
        $this->object->log(5);
    }

    /**
     * @covers pDebugger::exception
     */
    public function testException() {
        $this->object->service('debugger.output')
                ->expects($this->once())
                ->method('write')
                ->with(
                        $this->equalTo('Error 5: test message'),
                        $this->isType('string'),
                        $this->equalTo('exception')
                    );
        $this->object->exception(new Exception('test message', 5));
    }

    /**
     * @covers pDebugger::timeCheck
     */
    public function testTimeCheck() {
        $this->object->service('debugger.output')
                ->expects($this->once())
                ->method('write')
                ->with(
                        $this->isType('string'),
                        $this->isType('string'),
                        $this->equalTo('timeCheck')
                    );
        $this->object->timeCheck();
    }

    /**
     * @covers pDebugger::query
     */
    public function testQuery() {
        $this->object->service('debugger.output')
                ->expects($this->once())
                ->method('write')
                ->with(
                        $this->equalTo('SELECT * FROM `table`'),
                        $this->isType('string'),
                        $this->equalTo('query')
                    );
        $this->object->query('SELECT * FROM `table`');
    }

}
