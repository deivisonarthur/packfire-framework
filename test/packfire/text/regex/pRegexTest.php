<?php

pload('packfire.text.regex.pRegex');

/**
 * Test class for pRegex.
 * Generated by PHPUnit on 2012-09-19 at 12:54:55.
 */
class pRegexTest extends PHPUnit_Framework_TestCase {

    /**
     * @var pRegex
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new pRegex('`[a-z]{3}[0-9]{2}`is');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pRegex::regex
     */
    public function testRegex() {
        $this->assertEquals('`[a-z]{3}[0-9]{2}`is', $this->object->regex());
        $this->object->regex('`[a-z]{2}`is');
        $this->assertEquals('`[a-z]{2}`is', $this->object->regex());
    }

    /**
     * @covers pRegex::match
     */
    public function testMatch() {
        $result = $this->object->match('abc01');
        $this->assertInstanceOf('pList', $result);
        $this->assertCount(1, $result);
        $this->assertInstanceOf('pRegexMatch', $result[0]);
        $this->assertEquals('abc01', $result[0]->match());
    }

    /**
     * @covers pRegex::match
     */
    public function testMatch1() {
        $result = $this->object->match('abc01 adc21');
        $this->assertInstanceOf('pList', $result);
        $this->assertCount(1, $result);
        $this->assertInstanceOf('pRegexMatch', $result[0]);
        $this->assertEquals('abc01', $result[0]->match());
    }

    /**
     * @covers pRegex::match
     */
    public function testMatch2() {
        $result = $this->object->match('ab401');
        $this->assertInstanceOf('pList', $result);
        $this->assertCount(0, $result);
    }

    /**
     * @covers pRegex::matches
     */
    public function testMatches() {
        $this->assertTrue($this->object->matches('abc01'));
    }

    /**
     * @covers pRegex::matches
     */
    public function testMatches2() {
        $this->assertFalse($this->object->matches('aa011'));
    }

    /**
     * @covers pRegex::matchAll
     */
    public function testMatchAll() {
        $result = $this->object->matchAll('abc01 adc21');
        $this->assertInstanceOf('pList', $result);
        $this->assertCount(2, $result);
        $this->assertInstanceOf('pList', $result[0]);
        $this->assertInstanceOf('pRegexMatch', $result[0][0]);
        $this->assertEquals('abc01', $result[0][0]->match());
        $this->assertEquals('adc21', $result[1][0]->match());
    }

    /**
     * @covers pRegex::replace
     */
    public function testReplace() {
        $this->assertEquals('testcool!run', $this->object->replace('testabc10run', 'cool!'));
    }

    /**
     * @covers pRegex::replaceCallback
     */
    public function testReplaceCallback() {
        $this->assertEquals('testABC10run',
                $this->object->replaceCallback('testabc10run',
                        function($match){
                            return strtoupper($match[0]);
                        }
                    ));
    }

    /**
     * @covers pRegex::indexOf
     */
    public function testIndexOf() {
        $this->assertEquals(4, $this->object->indexOf('testabc10run'));
        $this->assertEquals(13, $this->object->indexOf('testabc10runcool10', 6));
    }

    /**
     * @covers pRegex::lastIndexOf
     */
    public function testLastIndexOf() {
        $this->assertEquals(13, $this->object->lastIndexOf('testabc10runcool10'));
        $this->assertEquals(13, $this->object->lastIndexOf('testabc10runcool10', 6));
    }

    /**
     * @covers pRegex::escape
     */
    public function testEscape() {
        $this->assertEquals('\[a-z\]\{3\}\[0-9\]\{2\}',
                pRegex::escape('[a-z]{3}[0-9]{2}'));
    }

}