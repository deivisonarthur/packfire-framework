<?php

pload('packfire.session.pSession');
pload('packfire.session.storage.ISessionStorage');

/**
 * Test class for pSession.
 * Generated by PHPUnit on 2012-09-19 at 05:33:57.
 */
class pSessionTest extends PHPUnit_Framework_TestCase {
    
    /**
     * @var PHPUnit_Framework_MockObject_MockObject|ISessionStorage
     */
    protected $stub;

    /**
     * @var pSession
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $storageStub = $this->getMock('ISessionStorage');
        $storageStub->expects($this->once())
                ->method('load');
        $this->stub = $storageStub;
        
        $this->object = new pSession($storageStub);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pSession::get
     */
    public function testGet() {
        $this->stub->expects($this->any())
                ->method('get')
                ->will($this->returnArgument(0));
        $this->assertEquals('test', $this->object->get('test'));
    }

    /**
     * @covers pSession::set
     */
    public function testSet() {
        $this->stub->expects($this->once())
                ->method('set')
                ->with($this->equalTo('test'), $this->equalTo('value'));
        $this->object->set('test', 'value');
    }

    /**
     * @covers pSession::clear
     */
    public function testClear() {
        $this->stub->expects($this->once())
                ->method('clear')
                ->with();
        $this->object->clear();
    }

    /**
     * @covers pSession::invalidate
     */
    public function testInvalidate() {
        $this->stub->expects($this->once())
                ->method('clear')
                ->with();
        $this->stub->expects($this->once())
                ->method('regenerate')
                ->with($this->equalTo(true));
        
        $this->object->invalidate();
    }

    /**
     * @covers pSession::regenerate
     */
    public function testRegenerate() {
        $this->stub->expects($this->once())
                ->method('regenerate')
                ->with();
        
        $this->object->regenerate();
    }

    /**
     * @covers pSession::bucket
     */
    public function testBucket() {
        $this->stub->expects($this->once())
                ->method('bucket')
                ->with($this->equalTo('test'))
                ->will($this->returnValue(null));
        
        $this->stub->expects($this->once())
                ->method('register')
                ->with($this->isInstanceOf('pSessionBucket'));
        
        $this->object->bucket('test');
    }

    /**
     * @covers pSession::bucket
     */
    public function testBucket2() {
        $this->stub->expects($this->once())
                ->method('bucket')
                ->with($this->equalTo('test'))
                ->will($this->returnValue(true));
        
        $this->assertTrue($this->object->bucket('test'));
    }

    /**
     * @covers pSession::register
     * @todo Implement testRegister().
     */
    public function testRegister() {
        $this->stub->expects($this->once())
                ->method('register')
                ->with($this->equalTo('test'));
        
        $this->object->register('test');
    }

}