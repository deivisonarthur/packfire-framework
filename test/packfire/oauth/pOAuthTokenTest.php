<?php

pload('packfire.oauth.pOAuthToken');
pload('packfire.oauth.pOAuth');
pload('packfire.oauth.pOAuthRequest');

/**
 * Test class for pOAuthToken.
 * Generated by PHPUnit on 2012-09-26 at 07:53:58.
 */
class pOAuthTokenTest extends PHPUnit_Framework_TestCase {

    /**
     * @var pOAuthToken
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new pOAuthToken('token', 'secret');
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pOAuthToken::key
     */
    public function testKey() {
        $this->assertEquals('token', $this->object->key());
    }

    /**
     * @covers pOAuthToken::secret
     */
    public function testSecret() {
        $this->assertEquals('secret', $this->object->secret());
    }

    /**
     * @covers pOAuthToken::load
     */
    public function testLoad() {
        $request = new pOAuthRequest();
        $request->oauth(pOAuth::TOKEN, 'test');
        $request->oauth(pOAuth::TOKEN_SECRET, 'secret2');
        $object = pOAuthToken::load($request);
        $this->assertEquals('test', $object->key());
        $this->assertEquals('secret2', $object->secret());
    }

    /**
     * @covers pOAuthToken::assign
     */
    public function testAssign() {
        $request = new pOAuthRequest();
        $this->object->assign($request);
        $this->assertEquals('token', $request->oauth(pOAuth::TOKEN));
        $this->assertEquals('secret', $request->oauth(pOAuth::TOKEN_SECRET));
    }

    public function test__toString() {
        $this->assertEquals('token', (string)$this->object);
    }

}