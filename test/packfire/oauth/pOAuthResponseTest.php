<?php

pload('packfire.oauth.pOAuthResponse');
pload('packfire.oauth.pOAuth');
pload('packfire.response.pJsonResponse');

/**
 * Test class for pOAuthResponse.
 * Generated by PHPUnit on 2012-09-26 at 08:34:03.
 */
class pOAuthResponseTest extends PHPUnit_Framework_TestCase {

    /**
     * @var pOAuthResponse
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new pOAuthResponse;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pOAuthResponse::oauth
     */
    public function testOauth() {
        $this->assertNull($this->object->oauth(pOAuth::CALLBACK));
        $this->object->oauth(pOAuth::TOKEN, 'token');
        $this->assertEquals('token', $this->object->oauth(pOAuth::TOKEN));
    }

    /**
     * @covers pOAuthResponse::format
     */
    public function testFormat() {
        $this->object->oauth(pOAuth::TOKEN, 'token');
        $context = $this->object->format('pJsonResponse');
        $this->assertInstanceOf('pJsonResponse', $context);
        /* @var $context IResponseFormat */
        $this->assertEquals(json_encode(array('oauth_token' => 'token')), $context->output());
    }

    /**
     * @covers pOAuthResponse::body
     */
    public function testBody() {
        $this->object->oauth(pOAuth::TOKEN, 'token');
        $this->object->oauth(pOAuth::TOKEN_SECRET, 'secret');
        $this->assertEquals('oauth_token=token&oauth_token_secret=secret', $this->object->body());
    }

    /**
     * @covers pOAuthResponse::output
     */
    public function testOutput() {
        $this->object->oauth(pOAuth::TOKEN, 'token');
        $this->object->oauth(pOAuth::TOKEN_SECRET, 'secret');
        $this->assertEquals($this->object->body(), $this->object->output());
    }

}