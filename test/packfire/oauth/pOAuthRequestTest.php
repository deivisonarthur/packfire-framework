<?php

pload('packfire.oauth.pOAuthRequest');
pload('packfire.oauth.pOAuth');
pload('packfire.net.http.pHttpRequest');
pload('packfire.oauth.pOAuthConsumer');
pload('packfire.exception.pInvalidArgumentException');

/**
 * Test class for pOAuthRequest.
 * Generated by PHPUnit on 2012-09-27 at 01:08:22.
 */
class pOAuthRequestTest extends PHPUnit_Framework_TestCase {

    /**
     * @var pOAuthRequest
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = new pOAuthRequest;
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown() {
        
    }

    /**
     * @covers pOAuthRequest::preload
     */
    public function testPreload() {
        $request = new pHttpRequest();
        $request->get()->add(pOAuth::CONSUMER_KEY, 'consumer');
        $request->get()->add('test', 'alpha');
        $this->object->preload($request);
        $this->assertEquals('consumer', $this->object->oauth(pOAuth::CONSUMER_KEY));
        $this->assertEquals('alpha', $this->object->get()->get('test'));
    }

    /**
     * @covers pOAuthRequest::oauth
     */
    public function testOauth() {
        $this->assertNull($this->object->oauth(pOAuth::CALLBACK));
        $this->object->oauth(pOAuth::TOKEN, 'token');
        $this->assertEquals('token', $this->object->oauth(pOAuth::TOKEN));
    }

    /**
     * @covers pOAuthRequest::parse
     */
    public function testParse() {
        $http = "POST /api/test?oauth_token=token HTTP/1.1\nHost: example.com\nAuthorization: OAuth oauth_consumer_key=consumer\n\ntest=5";
        $this->object->parse($http);
        $this->assertEquals(5, $this->object->post()->get('test'));
        $this->assertEquals('token', $this->object->oauth(pOAuth::TOKEN));
        $this->assertEquals('consumer', $this->object->oauth(pOAuth::CONSUMER_KEY));
    }

    /**
     * @covers pOAuthRequest::signatureBase
     */
    public function testSignatureBase() {
        $this->object->oauth(pOAuth::CONSUMER_KEY, 'consumer');
        $this->object->get()->add('test', 'alpha');
        $base = $this->object->signatureBase();
        $this->assertInternalType('string', $base);
        $this->assertEquals(1, substr_count($base, '%3Dconsumer'));
        $this->assertEquals(1, substr_count($base, 'oauth_consumer_key'));
        $this->assertEquals(1, substr_count($base, 'test'));
        $this->assertEquals(1, substr_count($base, '%3Dalpha'));
    }

    /**
     * @covers pOAuthRequest::method
     */
    public function testMethod() {
        $this->assertEquals('GET', $this->object->method('get'));
    }

    /**
     * @covers pOAuthRequest::buildAuthorizationHeader
     */
    public function testBuildAuthorizationHeader() {
        $this->object->oauth(pOAuth::CONSUMER_KEY, 'consumer');
        $this->object->oauth(pOAuth::TOKEN, 'token');
        $header = $this->object->buildAuthorizationHeader();
        $this->assertEquals('OAuth oauth_version="1.0", oauth_consumer_key="consumer", oauth_token="token"', $header);
        
    }

    /**
     * @covers pOAuthRequest::sign
     */
    public function testSign() {
        $this->object->oauth(pOAuth::NONCE, 'test');
        $this->object->oauth(pOAuth::TOKEN, 'token');
        $this->object->sign('HMAC-SHA1', new pOAuthConsumer('consumer', 'secret'));
        $this->assertNotNull($this->object->oauth(pOAuth::SIGNATURE));
        $this->assertNotNull($this->object->oauth(pOAuth::TIMESTAMP));
        $this->assertEquals('HMAC-SHA1', $this->object->oauth(pOAuth::SIGNATURE_METHOD));
    }
    
    /**
     * @covers pOAuthRequest::sign
     * @expectedException pInvalidArgumentException
     */
    public function testSignFail(){
        $this->object->sign('WOAHFAKE', new pOAuthConsumer('consumer', 'secret'));
    }

}